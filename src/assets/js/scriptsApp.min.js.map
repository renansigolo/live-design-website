{"version":3,"sources":["app.js","routes.js","controllers/dashboard/contacts.js","controllers/dashboard/documents.js","controllers/dashboard/main.js","controllers/dashboard/orders.js","controllers/dashboard/payments.js","controllers/login/login.js","controllers/login/logout.js","controllers/login/password.js","controllers/login/signup.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"scriptsApp.min.js","sourcesContent":["//Inicia o modulo do Dashboard em Angular\nvar app = angular.module('app', ['firebase', 'ui.router'])\n\n//Declara os modulos dos controllers do Dashboard\napp.controller('MainController', mainController)\napp.controller('OrdersController', ordersController)\napp.controller('PaymentsController', paymentsController)\napp.controller('DocumentsController', documentsController)\napp.controller('ContactsController', contactsController)\n\n//Declara os modulos dos controllers do Login\napp.controller('LoginController', loginController)\napp.controller('LogoutController', logoutController)\napp.controller('SignupController', signupController)\napp.controller('PasswordController', passwordController)\n\n//Declara as configuracoes das Rotas\napp.config(routes)\n","//Configuracao das rotas\nfunction routes($stateProvider, $urlRouterProvider) {\n  $stateProvider.state('home', {\n    templateUrl: 'templates/layout-home.html',\n    abstract: true,\n    url: '/home'\n  })\n\n  $stateProvider.state('home.login', {\n    templateUrl: 'templates/login.html',\n    controller: 'LoginController',\n    url: ''\n  })\n\n  $stateProvider.state('home.signup', {\n    templateUrl: 'templates/signup.html',\n    controller: 'SignupController',\n    url: '/signup'\n  })\n\n  $stateProvider.state('dashboard', {\n    templateUrl: 'templates/layout-dashboard.html',\n    abstract: true,\n    url: '/dashboard'\n  })\n\n  $stateProvider.state('dashboard.orders', {\n    templateUrl: 'templates/orders.html',\n    controller: 'OrdersController',\n    url: '/orders'\n  })\n\n  $stateProvider.state('dashboard.payments', {\n    templateUrl: 'templates/payments.html',\n    controller: 'PaymentsController',\n    url: '/payments'\n  })\n\n  $stateProvider.state('dashboard.documents', {\n    templateUrl: 'templates/documents.html',\n    controller: 'DocumentsController',\n    url: '/documents'\n  })\n\n  $stateProvider.state('dashboard.contacts', {\n    templateUrl: 'templates/contacts.html',\n    controller: 'ContactsController',\n    url: '/contacts'\n  })\n\n  $stateProvider.state('dashboard.main', {\n    templateUrl: 'templates/main.html',\n    controller: 'MainController',\n    url: '/main'\n  })\n\n  $urlRouterProvider.otherwise('/home')\n}\n","function contactsController($scope, $state) {\n  //Initialize collapse list\n  $(document).ready(() => {\n    $('.collapsible').collapsible()\n  })\n}\n","function documentsController($scope, $state, $firebaseObject, $firebaseAuth) {\n  //Initialize collapse list\n  $(document).ready(() => {\n    $('.collapsible').collapsible()\n  })\n\n  $scope.authObj = $firebaseAuth()\n\n  var authData = $scope.authObj.$getAuth()\n\n  //First value of the database\n  const rootRef = firebase\n    .database()\n    .ref()\n    .child('users')\n  //Second value of the database referencing to the first\n  const ref = rootRef.child(authData.uid)\n  const anotherref = ref.child('projectName')\n  //Gets the last variable as the parameter into a variable to be accessed in firebase\n  const syncObject = $firebaseObject(anotherref)\n  //Create a variable in the 'dados' that syncs with firebase and with the $scope\n  syncObject.$bindTo($scope, 'documentsData')\n}\n","function mainController($scope, $state, $firebaseObject, $firebaseAuth) {\n  $scope.authObj = $firebaseAuth()\n\n  var authData = $scope.authObj.$getAuth()\n  var userUID = authData.uid\n\n  if (authData) {\n    //console.log(\"Logged in as:\", authData.uid);\n\n    //First value of the database\n    const rootRef = firebase\n      .database()\n      .ref()\n      .child('users')\n    //Second value of the database referencing to the first\n    const ref = rootRef.child(authData.uid)\n    //Gets the last variable as the parameter into a variable to be accessed in firebase\n    const syncObject = $firebaseObject(ref)\n    //Create a variable in the 'dados' that syncs with firebase and with the $scope\n    syncObject.$bindTo($scope, 'data')\n  } else {\n    console.log('Logged out')\n  }\n}\n","function ordersController($scope, $state, $firebaseObject, $firebaseAuth) {\n  //Initialize collapse list\n  $(document).ready(() => {\n    $('.collapsible').collapsible()\n  })\n\n  $scope.authObj = $firebaseAuth()\n\n  var authData = $scope.authObj.$getAuth()\n\n  //First value of the database\n  const rootRef = firebase\n    .database()\n    .ref()\n    .child('users')\n  //Second value of the database referencing to the first\n  const ref = rootRef.child(authData.uid)\n  const anotherref = ref.child('projectName')\n  //Gets the last variable as the parameter into a variable to be accessed in firebase\n  const syncObject = $firebaseObject(anotherref)\n  //Create a variable in the 'dados' that syncs with firebase and with the $scope\n  syncObject.$bindTo($scope, 'ordersData')\n}\n","function paymentsController($scope, $state, $firebaseObject, $firebaseAuth) {\n  //Initialize collapse list\n  $(document).ready(() => {\n    $('.collapsible').collapsible()\n  })\n\n  $scope.authObj = $firebaseAuth()\n\n  var authData = $scope.authObj.$getAuth()\n\n  //First value of the database\n  const rootRef = firebase\n    .database()\n    .ref()\n    .child('users')\n  //Second value of the database referencing to the first\n  const ref = rootRef.child(authData.uid)\n  const anotherref = ref.child('projectName')\n  //Gets the last variable as the parameter into a variable to be accessed in firebase\n  const syncObject = $firebaseObject(anotherref)\n  //Create a variable in the 'dados' that syncs with firebase and with the $scope\n  syncObject.$bindTo($scope, 'paymentsData')\n}\n","function loginController($scope, $state, $window) {\n  //Get Elements\n  const txtEmail = document.getElementById('email')\n  const txtPassword = document.getElementById('password')\n  const btnLogin = document.getElementById('btnSignIn')\n\n  //If click the button\n  btnLogin.addEventListener('click', e => {\n    const email = txtEmail.value\n    const pass = txtPassword.value\n    const auth = firebase.auth()\n\n    //Sign In\n    const promise = auth.signInWithEmailAndPassword(email, pass)\n\n    //Catch error saved in promise const and display to the user\n    promise.catch(e => M.toast({html: e.message}))\n  })\n\n  firebase.auth().onAuthStateChanged(firebaseUser => {\n    if (firebaseUser) {\n      successfulLogin()\n    } else {\n      console.info('Not logged in')\n    }\n  })\n\n  const successfulLogin = () => {\n    M.toast({html: 'Bem-vindo!'})\n    $state.go('dashboard.main')\n  }\n}\n","function logoutController($scope, $state, $firebaseAuth, $window) {\n  const auth = $firebaseAuth()\n  $scope.logout = logout\n\n  auth.$onAuthStateChanged(searchStatus)\n\n  function searchStatus(firebaseUser) {\n    if (!firebaseUser) {\n      return\n    }\n    $scope.user = firebaseUser\n  }\n\n  // Essa função encerra a sessão do usuário no Firebase\n  function logout() {\n    auth.$signOut()\n    $state.go('home.login')\n    M.toast({html: 'Logout realizado com sucesso'})\n  }\n}\n","function passwordController() {\n  //Handles the Password Reset button press.\n  function sendPasswordReset() {\n    const email = document.getElementById('verifyEmail').value\n    firebase\n      .auth()\n      .sendPasswordResetEmail(email)\n      .then(() => {\n        // Password Reset Email Sent!\n        Materialize.toast('Email de redefinição de senha enviado!', 4000)\n      })\n      .catch(error => {\n        // Handle Errors here.\n        const errorCode = error.code\n        const errorMessage = error.message\n        if (errorCode == 'auth/invalid-email') {\n          alert(errorMessage)\n        } else if (errorCode == 'auth/user-not-found') {\n          alert(errorMessage)\n        }\n        console.error(error)\n      })\n  }\n  document\n    .getElementById('btnPasswordReset')\n    .addEventListener('click', sendPasswordReset, false)\n}\n","function signupController(\n  $scope,\n  $state,\n  $firebaseAuth,\n  $firebaseObject,\n  $window\n) {\n  var auth = $firebaseAuth()\n  var ref_usuario = firebase.database().ref('users')\n\n  $scope.data = {}\n  $scope.register = register\n  $scope.menssageError = {}\n  $scope.controlError = false\n\n  function register() {\n    auth\n      .$createUserWithEmailAndPassword($scope.data.email, $scope.data.password)\n      .then(register_data)\n      .catch(logError)\n  }\n\n  function register_data(firebaseUser) {\n    var user = $firebaseObject(ref_usuario.child(firebaseUser.uid))\n    var date = new Date()\n    user.name = $scope.data.name\n    user.email = $scope.data.email\n    user.date = date.toString()\n    user.$save()\n\n    Materialize.toast('Cadastro realizado com sucesso', 4000)\n    $state.go('dashboard.main')\n  }\n\n  function logError(error) {\n    $scope.controlError = true\n    $scope.menssageError = Materialize.toast(error.message, 4000)\n  }\n}\n"]}